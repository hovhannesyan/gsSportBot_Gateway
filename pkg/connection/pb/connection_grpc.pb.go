// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/connection/pb/connection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionClient is the client API for Connection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionClient interface {
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*DeleteSetResponse, error)
	AddToSet(ctx context.Context, in *AddToSetRequest, opts ...grpc.CallOption) (*AddToSetResponse, error)
	RemoveFromSet(ctx context.Context, in *RemoveFromSetRequest, opts ...grpc.CallOption) (*RemoveFromSetResponse, error)
}

type connectionClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionClient(cc grpc.ClientConnInterface) ConnectionClient {
	return &connectionClient{cc}
}

func (c *connectionClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, "/connection.Connection/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*DeleteSetResponse, error) {
	out := new(DeleteSetResponse)
	err := c.cc.Invoke(ctx, "/connection.Connection/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) AddToSet(ctx context.Context, in *AddToSetRequest, opts ...grpc.CallOption) (*AddToSetResponse, error) {
	out := new(AddToSetResponse)
	err := c.cc.Invoke(ctx, "/connection.Connection/AddToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) RemoveFromSet(ctx context.Context, in *RemoveFromSetRequest, opts ...grpc.CallOption) (*RemoveFromSetResponse, error) {
	out := new(RemoveFromSetResponse)
	err := c.cc.Invoke(ctx, "/connection.Connection/RemoveFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServer is the server API for Connection service.
// All implementations must embed UnimplementedConnectionServer
// for forward compatibility
type ConnectionServer interface {
	GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error)
	DeleteSet(context.Context, *DeleteSetRequest) (*DeleteSetResponse, error)
	AddToSet(context.Context, *AddToSetRequest) (*AddToSetResponse, error)
	RemoveFromSet(context.Context, *RemoveFromSetRequest) (*RemoveFromSetResponse, error)
	mustEmbedUnimplementedConnectionServer()
}

// UnimplementedConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServer struct {
}

func (UnimplementedConnectionServer) GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedConnectionServer) DeleteSet(context.Context, *DeleteSetRequest) (*DeleteSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}
func (UnimplementedConnectionServer) AddToSet(context.Context, *AddToSetRequest) (*AddToSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToSet not implemented")
}
func (UnimplementedConnectionServer) RemoveFromSet(context.Context, *RemoveFromSetRequest) (*RemoveFromSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromSet not implemented")
}
func (UnimplementedConnectionServer) mustEmbedUnimplementedConnectionServer() {}

// UnsafeConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServer will
// result in compilation errors.
type UnsafeConnectionServer interface {
	mustEmbedUnimplementedConnectionServer()
}

func RegisterConnectionServer(s grpc.ServiceRegistrar, srv ConnectionServer) {
	s.RegisterService(&Connection_ServiceDesc, srv)
}

func _Connection_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.Connection/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.Connection/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).DeleteSet(ctx, req.(*DeleteSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_AddToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).AddToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.Connection/AddToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).AddToSet(ctx, req.(*AddToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_RemoveFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).RemoveFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.Connection/RemoveFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).RemoveFromSet(ctx, req.(*RemoveFromSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connection_ServiceDesc is the grpc.ServiceDesc for Connection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connection.Connection",
	HandlerType: (*ConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSet",
			Handler:    _Connection_GetSet_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _Connection_DeleteSet_Handler,
		},
		{
			MethodName: "AddToSet",
			Handler:    _Connection_AddToSet_Handler,
		},
		{
			MethodName: "RemoveFromSet",
			Handler:    _Connection_RemoveFromSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/connection/pb/connection.proto",
}
